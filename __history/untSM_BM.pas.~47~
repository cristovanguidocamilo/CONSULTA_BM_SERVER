unit untSM_BM;

interface

uses System.SysUtils, System.Classes, System.Json,
    Datasnap.DSServer, Datasnap.DSAuth, UTipos, Dialogs, System.NetEncoding;

type
{$METHODINFO ON}
  TSM_BM = class(TDataModule)
  private
    { Private declarations }
  public
    { Public declarations }
    function EstoqueBloqueado: TJSONArray;
    function Camaras: TJSONArray;
    function CamarasDetalhe(CodCamara: String): TJSONArray;
    function BalancaMapa: TJSONArray;
    function Acompanha: TJSONArray;
    function QuantidadesAbate: TJSONArray;
    function QuantidadesLote(num_lote: String): TJSONArray;
    function EscalaAbate: TJSONArray;
    function ValidaUsuario(usuario, senha: String):TJSONArray;
    //Funções para Criptografia
    function Criptografa(texto: String):String;
    function Decriptografa(texto: String): String;
  end;
{$METHODINFO OFF}

implementation


{$R *.dfm}

uses UDados;


{ TSM_BM }

function TSM_BM.Acompanha: TJSONArray;
Var
  Dados: TDMDados;
  JsonArray: TJSONArray;
  JObj: TJSONObject;
begin
   try
    Dados := TDMDados.Create(nil);

    try
      if(Dados.CONEXAO.Connected = false) then
        Dados.CONEXAO.Connected := True;
      Dados.Acompanha.Active := False;
      Dados.Acompanha.Active := True;
    finally

    end;

    JsonArray := TJSONArray.Create;

    Dados.Acompanha.First;
    while not Dados.Acompanha.Eof do
    begin
      JObj := TJSONObject.Create;
      JObj.AddPair('total',Dados.Acompanhaqtdlote.AsString);
      JObj.AddPair('abatidos',Dados.Acompanhaqtdabate.AsString);
      JObj.AddPair('restam',Dados.Acompanharestam.AsString);
      JsonArray.Add(JObj);
      Dados.Acompanha.Next;
    end;

    Result := JsonArray;

    Dados.Acompanha.Active := False;
    Dados.CONEXAO.Connected := False;

  finally
    if Assigned(Dados) then
      FreeAndNil(Dados);
  end;
end;

function TSM_BM.BalancaMapa: TJSONArray;
Var
  Dados: TDMDados;
  JsonArray: TJSONArray;
  JObj: TJSONObject;
begin
   try
    Dados := TDMDados.Create(nil);

    try
      if(Dados.CONEXAO.Connected = false) then
        Dados.CONEXAO.Connected := True;
      Dados.BalancaMapa.Active := False;
      Dados.BalancaMapa.Active := True;
    finally

    end;

    JsonArray := TJSONArray.Create;

    Dados.BalancaMapa.First;
    while not Dados.BalancaMapa.Eof do
    begin
      JObj := TJSONObject.Create;
      JObj.AddPair('seqAbate',Dados.BalancaMapaseq_abate.AsString);
      JObj.AddPair('banda',Dados.BalancaMapabanda.AsString);
      JObj.AddPair('habilitacao',Dados.BalancaMaparastr.AsString);
      JObj.AddPair('numLote',Dados.BalancaMapanum_lote.AsString);
      JObj.AddPair('dataPes',FormatDateTime('dd-MM-yyyy hh:mm:ss',Dados.BalancaMapadata_pes.AsDateTime));
      JObj.AddPair('codMatur',Dados.BalancaMapacod_matur.AsString);
      JObj.AddPair('tempo',Dados.BalancaMapatempo.AsString);
      JsonArray.Add(JObj);
      Dados.BalancaMapa.Next;
    end;

    Result := JsonArray;

    Dados.BalancaMapa.Active := False;
    Dados.CONEXAO.Connected := False;

  finally
    if Assigned(Dados) then
      FreeAndNil(Dados);
  end;
end;

function TSM_BM.Camaras: TJSONArray;
Var
  Dados: TDMDados;
  JsonArray: TJSONArray;
  JObj: TJSONObject;
begin
   try
    Dados := TDMDados.Create(nil);

    try
      if(Dados.CONEXAO.Connected = false) then
        Dados.CONEXAO.Connected := True;
      Dados.Camaras.Active := False;
      Dados.Camaras.Active := True;
    finally

    end;

    JsonArray := TJSONArray.Create;

    Dados.Camaras.First;
    while not Dados.Camaras.Eof do
    begin
      JObj := TJSONObject.Create;
      JObj.AddPair('codCamara',Dados.Camarascod_camara.AsString);
      JObj.AddPair('habilitacao',Dados.Camarasrastr.AsString);
      JObj.AddPair('quantidade',Dados.Camarasquant.AsString);
      JObj.AddPair('periodo',Dados.Camarasperiodo.AsString);
      JsonArray.Add(JObj);
      Dados.Camaras.Next;
    end;

    Result := JsonArray;

    Dados.Camaras.Active := False;
    Dados.CONEXAO.Connected := False;

  finally
    if Assigned(Dados) then
      FreeAndNil(Dados);
  end;
end;

function TSM_BM.CamarasDetalhe(CodCamara: String): TJSONArray;
Var
  Dados: TDMDados;
  JsonArray: TJSONArray;
  JObj: TJSONObject;
begin
  try
    Dados := TDMDados.Create(nil);

    try
      if(Dados.CONEXAO.Connected = false) then
        Dados.CONEXAO.Connected := True;
      Dados.CamarasDetalhe.Active := False;
      Dados.CamarasDetalhe.ParamByName('cod_camara').AsString := CodCamara;
      Dados.CamarasDetalhe.Active := True;
    finally

    end;

    JsonArray := TJSONArray.Create;

    Dados.CamarasDetalhe.First;
    while not Dados.CamarasDetalhe.Eof do
    begin
      JObj := TJSONObject.Create;
      JObj.AddPair('codCamara',Dados.CamarasDetalhecod_camara.AsString);
      JObj.AddPair('seqAbate',Dados.CamarasDetalheseq_abate.AsString);
      JObj.AddPair('banda',Dados.CamarasDetalhebanda.AsString);
      JObj.AddPair('codTrilho',Dados.CamarasDetalhecod_trilho.AsString);
      JObj.AddPair('habilitacao',Dados.CamarasDetalherastr.AsString);
      JObj.AddPair('numLote',Dados.CamarasDetalhenum_lote.AsString);
      JsonArray.Add(JObj);
      Dados.CamarasDetalhe.Next;
    end;

    Result := JsonArray;

    Dados.CamarasDetalhe.Active := False;
    Dados.CONEXAO.Connected := False;

  finally
    if Assigned(Dados) then
      FreeAndNil(Dados);
  end;

end;

function TSM_BM.Criptografa(texto: String): String;
begin
    Result := TNetEncoding.Base64.Encode(texto);
end;

function TSM_BM.Decriptografa(texto: String): String;
begin
  Result := TNetEncoding.Base64.Decode(texto);
end;

function TSM_BM.EscalaAbate: TJSONArray;
Var
  Dados: TDMDados;
  JsonArray: TJSONArray;
  JObj: TJSONObject;
begin
  try
    Dados := TDMDados.Create(nil);

    try
      if(Dados.CONEXAO.Connected = false) then
        Dados.CONEXAO.Connected := True;
      Dados.EscalaAbate.Active := False;
      Dados.EscalaAbate.Active := True;
    finally

    end;

    JsonArray := TJSONArray.Create;

    Dados.EscalaAbate.First;
    while not Dados.EscalaAbate.Eof do
    begin
      JObj := TJSONObject.Create;
      JObj.AddPair('lote',Dados.EscalaAbatelote.AsString);
      JObj.AddPair('subLote',Dados.EscalaAbateseq_lote.AsString);
      JObj.AddPair('quantLote',Dados.EscalaAbatequant_lote.AsString);
      JObj.AddPair('currais',Dados.EscalaAbatecurrais.AsString);
      JObj.AddPair('nome',Dados.EscalaAbatenome.AsString);
      JObj.AddPair('nomeFazenda',Dados.EscalaAbatenome_fazenda.AsString);
      JObj.AddPair('statusLote',Dados.EscalaAbatestatus_lote.AsString);
      JObj.AddPair('habilitacao',Dados.EscalaAbatehabilitacao.AsString);
      JObj.AddPair('brincado',Dados.EscalaAbatebrincado.AsString);
      JsonArray.Add(JObj);
      Dados.EscalaAbate.Next;
    end;

    Result := JsonArray;

    Dados.EscalaAbate.Active := False;
    Dados.CONEXAO.Connected := False;

  finally
    if Assigned(Dados) then
      FreeAndNil(Dados);
  end;
end;

function TSM_BM.EstoqueBloqueado: TJSONArray;
Var
  Dados: TDMDados;
  JsonArray: TJSONArray;
  JObj: TJSONObject;
begin
  try
    Dados := TDMDados.Create(nil);

    try
      if(Dados.CONEXAO.Connected = false) then
        Dados.CONEXAO.Connected := True;
      Dados.EstoqueBloq.Active := False;
      Dados.EstoqueBloq.Active := True;
    finally

    end;

    JsonArray := TJSONArray.Create;

    Dados.EstoqueBloq.First;
    while not Dados.EstoqueBloq.Eof do
    begin
      JObj := TJSONObject.Create;
      JObj.AddPair('produto',Dados.EstoqueBloqproduto.AsString);
      JObj.AddPair('tipo',Dados.EstoqueBloqtipo.AsString);
      JObj.AddPair('dataAbate',FormatDateTime('dd-MM-yyyy',Dados.EstoqueBloqdata_abate.AsDateTime));
      JObj.AddPair('habilitacao',Dados.EstoqueBloqhabilitacao.AsString);
      JObj.AddPair('quantidade',Dados.EstoqueBloqquant.AsString);
      JsonArray.Add(JObj);
      Dados.EstoqueBloq.Next;
    end;

    Result := JsonArray;

    Dados.EstoqueBloq.Active := False;
    Dados.CONEXAO.Connected := False;

  finally
    if Assigned(Dados) then
      FreeAndNil(Dados);
  end;

end;

function TSM_BM.QuantidadesAbate: TJSONArray;
Var
  Dados: TDMDados;
  JsonArray: TJSONArray;
  JObj: TJSONObject;
begin
   try
    Dados := TDMDados.Create(nil);

    try
      if(Dados.CONEXAO.Connected = false) then
        Dados.CONEXAO.Connected := True;
      Dados.QuantidadesAbate.Active := False;
      Dados.QuantidadesAbate.Active := True;
    finally

    end;

    JsonArray := TJSONArray.Create;

    Dados.QuantidadesAbate.First;
    while not Dados.QuantidadesAbate.Eof do
    begin
      JObj := TJSONObject.Create;
      JObj.AddPair('habilitacao',Dados.QuantidadesAbaterastr.AsString);
      JObj.AddPair('quantidade',Dados.QuantidadesAbatequant.AsString);
      JsonArray.Add(JObj);
      Dados.QuantidadesAbate.Next;
    end;

    Result := JsonArray;

    Dados.QuantidadesAbate.Active := False;
    Dados.CONEXAO.Connected := False;

  finally
    if Assigned(Dados) then
      FreeAndNil(Dados);
  end;
end;

function TSM_BM.QuantidadesLote(num_lote: String): TJSONArray;
Var
  Dados: TDMDados;
  JsonArray: TJSONArray;
  JObj: TJSONObject;
begin
  if (num_lote = '') then
    num_lote := '00';
   try
    Dados := TDMDados.Create(nil);

    try
      if(Dados.CONEXAO.Connected = false) then
        Dados.CONEXAO.Connected := True;
      Dados.QuantidadesLote.Active := False;
      Dados.QuantidadesLote.ParamByName('num_lote').AsString := num_lote;
      Dados.QuantidadesLote.Active := True;
    finally

    end;

    JsonArray := TJSONArray.Create;

    Dados.QuantidadesLote.First;
    while not Dados.QuantidadesLote.Eof do
    begin
      JObj := TJSONObject.Create;
      JObj.AddPair('numLote',Dados.QuantidadesLotenum_lote.AsString);
      JObj.AddPair('habilitacao',Dados.QuantidadesLoterastr.AsString);
      JObj.AddPair('quantidade',Dados.QuantidadesLotequant.AsString);
      JsonArray.Add(JObj);
      Dados.QuantidadesLote.Next;
    end;

    Result := JsonArray;

    Dados.QuantidadesLote.Active := False;
    Dados.CONEXAO.Connected := False;

  finally
    if Assigned(Dados) then
      FreeAndNil(Dados);
  end;
end;

function TSM_BM.ValidaUsuario(usuario, senha: String): TJSONArray;
Var
  JsonArray: TJSONArray;
  JObj: TJSONObject;
begin
  JsonArray := TJSONArray.Create;
  JObj := TJSONObject.Create;

  if((usuario = 'cristovan') and (senha = '12052731')) then //desenvolver rotina de validação de usuário
    JObj.AddPair('result','Login Permitido')
  else
    JObj.AddPair('result','Login Negado');

  JsonArray.Add(JObj);
  Result := JsonArray;
end;

end.

